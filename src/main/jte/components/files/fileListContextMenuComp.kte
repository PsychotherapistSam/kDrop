@import de.sam.base.database.FileDAO

@param parent: FileDAO?

<script src="https://cdn.jsdelivr.net/npm/dragselect@2.3.1/dist/DragSelect.min.js"></script>

<!-- initially hidden right-click menu -->
<nav id="context-menu" class="context-menu">
    <div class="ui compact vertical menu">
        <div class="ui simple dropdown item context-item context-item-dropdown">
            <i class="dropdown icon"></i>
            New
            <div class="menu">
                <a class="item context-item" data-action="new-folder">
                    <i class="folder icon"></i>Folder
                </a>
                <a class="item context-item" data-action="new-share">
                    <i class="share icon"></i>Share
                </a>
            </div>
        </div>
        <a class="red item context-item" data-action="download">
            <i class="download icon"></i> Download
        </a>
        <a class="item context-item" data-action="copy">
            <i class="copy icon"></i> Copy
        </a>
        <a class="red item context-item" data-action="delete">
            <i class="red trash icon"></i> Delete
        </a>
        <div class="ui simple dropdown item context-item context-item-dropdown">
            <i class="dropdown icon"></i>
            More
            <div class="menu">
                <a class="item context-item" data-action="display-small">Small</a>
                <a class="item context-item" data-action="display-medium">Medium</a>
                <a class="item context-item" data-action="display-large">Large</a>
            </div>
        </div>
    </div>
</nav>

<div class="ui tiny modal" id="folderCreationModal">
    <div class="header">New Folder</div>
    <div class="content">
        <form class="ui form" id="folderCreationForm">
            <div class="field">
                <label for="username">Name</label>
                <input type="text" name="name" id="name" placeholder="Name" tabindex="1">
            </div>
        </form>
    </div>
    <div class="actions">
        <button class="ui compact green approve button"
                _="on click add .loading">
            Create
        </button>
        <button class="ui compact secondary deny button">Cancel</button>
    </div>
</div>

<div class="ui tiny modal" id="fileDeletionModal">
    <div class="header">Deleting files..</div>
    <div class="content">
        <div class="ui red active centered inline loader"></div>
    </div>
</div>

<div class="ui tiny modal" id="fileDownloadModal">
    <div class="header">Downloading files..</div>
    <div class="content">
        <div class="ui orange indeterminate progress" id="downloadModalProgress" data-total="100">
            <div class="bar">
                <div class="progress">Processing</div>
            </div>
            <div class="label">Funding</div>
        </div>
        <%--        <div class="ui green active centered inline loader" id="downlaodModalLoader"></div>--%>
    </div>
</div>

<style>
    /* context menu */

    .context-menu {
        display: none;
        position: absolute;
        z-index: 10;
        width: 240px;
    }

    .context-menu--active {
        display: block;
    }

    .ds-selectable {
        -webkit-touch-callout: none;
        /* iOS Safari */
        -webkit-user-select: none;
        /* Safari */
        -khtml-user-select: none;
        /* Konqueror HTML */
        -moz-user-select: none;
        /* Old versions of Firefox */
        -ms-user-select: none;
        /* Internet Explorer/Edge */
        user-select: none;
        /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
    }


    .ds-selectable:hover {
        background-color: rgba(0, 0, 0, 0.07);
    }

    .ds-selected {
        background-color: rgba(0, 0, 0, 0.05) !important;
    }

    .ds-selector {
        background: rgba(0, 0, 0, 0.1) none repeat scroll 0% 0% !important;
        border: 1px solid rgba(0, 0, 0, 0.45) !important;
    }
</style>

<script>
    // https://stackoverflow.com/a/39845980/11324248
    // https://www.sitepoint.com/building-custom-right-click-context-menu-javascript/
    // https://codepen.io/SitePoint/pen/MYLoWY
    // Adapted to work with the fomantic-ui framework


    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////
    //
    // H E L P E R    F U N C T I O N S
    //
    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////

    /**
     * Function to check if we clicked inside an element with a particular class
     * name.
     *
     * @param {Object} e The event
     * @param {String} className The class name to check against
     * @return {Boolean}
     */
    function clickInsideElement(e, className) {
        var el = e.srcElement || e.target;

        if (el.classList.contains(className)) {
            return el;
        } else {
            while (el = el.parentNode) {
                if (el.classList && el.classList.contains(className)) {
                    return el;
                }
            }
        }

        return false;
    }

    /**
     * Get's exact position of event.
     *
     * @param {Object} e The event passed in
     * @return {Object} Returns the x and y position
     */
    function getPosition(e) {
        var posx = 0;
        var posy = 0;

        if (!e) var e = window.event;

        if (e.pageX || e.pageY) {
            posx = e.pageX;
            posy = e.pageY;
        } else if (e.clientX || e.clientY) {
            posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }

        return {
            x: posx,
            y: posy
        }
    }

    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////
    //
    // C O R E    F U N C T I O N S
    //
    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////

    /**
     * Variables.
     */
    var contextMenuClassName = "context-menu";
    var contextMenuLinkClassName = "context-item";
    var contextMenuActive = "context-menu--active";

    var taskItemClassName = "context-clickable";
    var rowInContext;
    var taskItemActiveClass = "active";

    var clickCoords;
    var clickCoordsX;
    var clickCoordsY;

    var menu = document.querySelector("#context-menu");
    var menuState = 0;
    var menuWidth;
    var menuHeight;
    var menuPosition;
    var menuPositionX;
    var menuPositionY;

    var windowWidth;
    var windowHeight;


    /*
    var table = $('#fileTable').DataTable({
        paging: false,
        ordering: false,
        searching: false,
        info: false,
        select: true
    });*/

    let ds = null;

    function initializeDragSelect() {
        ds = new DragSelect({
            selectables: document.getElementsByClassName('context-clickable'),
            area: document.getElementById('fileTableBody'),
            draggability: false, // implement this instead: https://interactjs.io/docs/
            keyboardDrag: false,
            //selectedClass: 'selected'
        });
        // fired once the user releases the mouse. (items) = selected nodes:
        /* ds.subscribe('callback', ({ items, event }) => {
             table.rows().deselect();
             table.rows('.ds-selected').select();
             console.log(items)
         });*/
        ds.subscribe('predragstart', ({event}) => {
            if (event.type != "mousedown") {
                ds.stop()
            }
        });
        ds.subscribe('dragstart', ({event}) => {
            if (event === "mousedown") {
                // console.log(event)
            }
            toggleMenuOff();
        })
        ds.subscribe('elementselect', ({item, items}) => {
            // console.log(item)
            // $(item).find(".checkbox")[0].checked = true;

            selectRow(item);
            if (items.length == $(".context-clickable").length - 1) {
                $("#toggleAllSelection")[0].checked = true;
            }
        });
        ds.subscribe('elementunselect', ({item, items}) => {
            /// $(item).find(".checkbox")[0].checked = false;

            deselectRow(item);

            $("#toggleAllSelection")[0].checked = false;
            // console.log(items)
        });
    }

    /*
            $('#fileTable').selectable({
                classes: {
                    "ui-selected": "selected"
                },
                filter: 'tr',
                stop: function () {
                    console.log(this);
                    $(".ui-selected", this).each(function () {
                        var index = $("#fileTable tr").index(this) - 1;
                        $('#fileTable tbody tr:eq(' + index + ')').toggleClass('active');
                        $('#fileTable tbody tr:eq(' + index + ')').toggleClass('ui-selected');
                    });
                }
            });
    */
    /**
     * Initialise our application's code.
     */
    function init() {
        initializeDragSelect()
        contextListener();
        clickListener();
        keyupListener();
        resizeListener();
        console.log("registered context menu listeners etc.")
    }


    function isSelected(row) {
        return ds.getSelection().contains(row);
    }

    function getSelectedRows() {
        return ds.getSelection()
    }

    function toggleSelection() {
        if ($("#toggleAllSelection")[0].checked) {
            selectAll();
        } else {
            clearSelection();
        }
    }

    function selectAll() {
        $(".context-clickable").each(function (_, item) {
            selectRow(item)
        });
        //ds.addSelection($(".context-clickable"))
    }

    function clearSelection() {
        ds.getSelection().forEach(function (item) {
            deselectRow(item)
        });
    }

    function selectRow(row) {
        ds.addSelection(row)
        $(row).find(":checkbox")[0].checked = true;
    }

    function deselectRow(row) {
        ds.removeSelection(row)
        $(row).find(":checkbox")[0].checked = false;
    }

    /**
     * Listens for contextmenu events.
     */
    function contextListener() {
        document.addEventListener("contextmenu", function (e) {
            // another item is clicked
            if (rowInContext && getSelectedRows().length == 1) {
                clearSelection();
                //table.rows(rowInContext).deselect();
                // rowInContext.classList.remove(taskItemActiveClass)
            }
            rowInContext = clickInsideElement(e, taskItemClassName);

            if (rowInContext) {
                e.preventDefault();
                toggleMenuOn();
                positionMenu(e);

            } else {
                rowInContext = null;
                toggleMenuOff();
            }
        });
    }

    /**
     * Listens for click events.
     */
    function clickListener() {
        const target = document.querySelector('#fileTable')

        document.addEventListener("click", function (e) {
            if (event.target.type === "checkbox" && event.target.id != "toggleAllSelection" && event.composedPath().includes(target)) {
                var row = event.target.closest(".context-clickable")
                if (event.target.checked) {
                    // not using addSelection because that uses invalid jquery on mobile
                    selectRow(row)
                    // ds.addSelection(row)
                } else {
                    // not using deselectRow because that uses invalid jquery on mobile
                    deselectRow(row)
                    //  ds.removeSelection(row)
                }
            }

            var clickeElIsLink = clickInsideElement(e, contextMenuLinkClassName);

            if (clickeElIsLink) {
                e.preventDefault();
                menuItemListener(clickeElIsLink);
            } else {
                // this closes the menu when not clicking on the menu
                // this closes the menu when the dropdown is clicked, so I disabled it (without really understanding the code)
                var button = e.which || e.button;
                if (button === 1) {
                    toggleMenuOff();
                }
            }

            // clear selection when clicking outside of the table
            const withinBoundaries = e.composedPath().includes(target)
            if (!withinBoundaries) {
                ds.clearSelection();
            }
        }, false);
    }

    /**
     * Listens for keyup events.
     */
    function keyupListener() {
        window.onkeyup = function (e) {
            if (e.keyCode === 27) {
                toggleMenuOff();
            }
        }
    }

    /**
     * Window resize event listener
     */
    function resizeListener() {
        window.onresize = function (e) {
            toggleMenuOff();
        };
    }

    /**
     * Turns the custom context menu on.
     */
    function toggleMenuOn() {
        if (getSelectedRows().length <= 1) {
            ds.clearSelection();
            ds.addSelection(rowInContext);
            //table.rows().deselect();
            //table.rows(rowInContext).select();
            //rowInContext.classList.add(taskItemActiveClass)
        }
        if (menuState !== 1) {
            menuState = 1;
            menu.classList.add(contextMenuActive);
        }
    }

    /**
     * Turns the custom context menu off.
     */
    function toggleMenuOff() {
        if (menuState !== 0) {
            menuState = 0;
            menu.classList.remove(contextMenuActive);

            // ds.clearSelection();

            // table.rows().deselect();
            /*if (getSelectedRows().length == 1) {
                //rowInContext.classList.remove(taskItemActiveClass)
                table.rows(rowInContext).deselect();
            }*/
        }
    }

    /**
     * Positions the menu properly.
     *
     * @param {Object} e The event
     */
    function positionMenu(e) {
        clickCoords = getPosition(e);
        clickCoordsX = clickCoords.x;
        clickCoordsY = clickCoords.y;

        menuWidth = menu.offsetWidth + 4;
        menuHeight = menu.offsetHeight + 4;

        windowWidth = window.innerWidth;
        windowHeight = window.innerHeight;

        if ((windowWidth - clickCoordsX) < menuWidth) {
            menu.style.left = windowWidth - menuWidth + "px";
        } else {
            menu.style.left = clickCoordsX + "px";
        }

        if ((windowHeight - clickCoordsY) < menuHeight) {
            menu.style.top = windowHeight - menuHeight + "px";
        } else {
            menu.style.top = clickCoordsY + "px";
        }
    }

    /**
     * Dummy action function that logs an action when a menu item link is clicked
     *
     * @param {HTMLElement} link The link that was clicked
     */
    function menuItemListener(link) {
        // the dropdown menu should not close the whole menu when clicked, and itself should not be a clickable link, but yet it should not be considered outside the menu (which would lead it to close)
        if (!link.classList.contains("context-item-dropdown")) {
            const rows = getSelectedRows();
            if (rows.length > 0) {
                const ids = rows.map(function (row) {
                    return row.getAttribute("data-id");
                }).join(",");
                const data = new FormData();
                data.append("files", ids);
                switch (link.getAttribute("data-action")) {
                    case "delete":
                        if (rows.length > 5) {
                            showFileDeletionLoadingModal(rows.length);
                        }
                        $.ajax({
                            url: "/api/v1/files",
                            type: "DELETE",
                            enctype: "multipart/form-data",
                            data: data,
                            processData: false,
                            contentType: false,

                            success: function (result) {
                                // console.log(result);
                                // rows.remove();
                                // ds.removeSelectables(rowsToDelete)
                                // updateVisibilityOfEmptyFolder();
                                hideFileDeletionLoadingModal();
                                htmx.trigger("#refreshButton", "refreshTable");
                            },
                            error: function (error) {
                                // show fomantic toast
                                hideFileDeletionLoadingModal();
                                $('body')
                                    .toast({
                                        class: 'error',
                                        message: 'Could not delete file: ' + error
                                    })
                                ;
                            }
                        });
                        break;
                    case "download":
                        if (rows.length === 1) {
                            window.location.href = "/api/v1/files/" + rows[0].getAttribute("data-id") + "?download";
                        } else {
                            showFileDownloadModal(rows.length, -1);
                            // https://stackoverflow.com/a/29556434
                            var xhr = new XMLHttpRequest();
                            xhr.open("PUT", "/api/v1/files", true);
                            xhr.responseType = 'blob';
                            // set multipart data
                            xhr.onprogress = function (e) {
                                console.log(e.loaded + " / " + e.total);
                                if (e.lengthComputable) {
                                    const percentComplete = (e.loaded / e.total) * 100;
                                    showFileDownloadModal(rows.length, Math.round(percentComplete));
                                }
                            };
                            xhr.onload = function (e) {
                                const filename = e.target.getResponseHeader("Content-Disposition").split(" ")[1].split("=")[1];
                                if (this.status == 200) {
                                    var blob = new Blob([this.response], {type: 'application/zip'});
                                    var downloadUrl = URL.createObjectURL(blob);
                                    var a = document.createElement("a");
                                    a.href = downloadUrl;
                                    a.download = filename;
                                    document.body.appendChild(a);
                                    a.click();
                                } else {
                                    $('body')
                                        .toast({
                                            class: 'error',
                                            message: 'Could not download files as zip'
                                        })
                                    ;
                                }
                                hideFileDownloadModal();
                            };
                            xhr.onabort = function (e) {
                                $('body')
                                    .toast({
                                        class: 'error',
                                        message: 'Could not download files as zip'
                                    })
                                ;
                                hideFileDownloadModal();
                            }
                            xhr.send(data);

                            /*
                             $.ajax({
                                 url: "/api/v1/files",
                                 type: "PUT",
                                 enctype: "multipart/form-data",
                                 data: data,
                                 processData: false,
                                 contentType: false,

                                 success: function (result) {
                                     var blob = new Blob([result], {type: "application/zip"});
                                     if (window.navigator.msSaveOrOpenBlob) {
                                         window.navigator.msSaveBlob(blob, "download.zip");
                                     } else {
                                         var a = document.createElement("a");
                                         a.href = window.URL.createObjectURL(blob);
                                         a.download = "download.zip";
                                         document.body.appendChild(a);
                                         a.click();
                                         document.body.removeChild(a);
                                     }

                                     //     save("download.zip", result)
                                     //     console.log(result)
                                     // console.log(result);
                                     // rows.remove();
                                     // ds.removeSelectables(rowsToDelete)
                                     // updateVisibilityOfEmptyFolder();
                                     //  hideFileDeletionLoadingModal();
                                     //   htmx.trigger("#refreshButton", "refreshTable");
                                 },
                                 error: function (error) {
                                     // show fomantic toast
                                     // hideFileDeletionLoadingModal();
                                     $('body')
                                         .toast({
                                             class: 'error',
                                             message: 'Could not download files: ' + error.toString()
                                         })
                                     ;
                                 }
                             });*/
                        }
                        break;
                    case "new-folder":
                        promptFolderCreation();
                        break;
                }
            }
            getSelectedRows().forEach(function (row) {
                    switch (link.getAttribute("data-action")) {
                        // case "download":
                        //     window.location.href = "/api/v1/files/" + row.getAttribute("data-id") + "?download";
                        //     break;
                        /*case "delete":
                            const fileId = row.getAttribute("data-id");
                            $.ajax({
                                url: "/api/v1/files/" + fileId,
                                type: "DELETE",
                                success: function (result) {
                                    // console.log(result);
                                    ds.removeSelectables(row)
                                    row.remove();
                                    updateVisibilityOfEmptyFolder();
                                },
                                error: function (error) {
                                    // show fomantic toast
                                    $('body')
                                        .toast({
                                            class: 'error',
                                            message: 'Could not delete file'
                                        })
                                    ;
                                }
                            });
                            break;*/
                        // case "new-folder":
                        //     promptFolderCreation();
                        //     break;
                        /* default:
                             console.log(row.getAttribute("data-id"));
                             console.log(link.getAttribute("data-action"))
                             console.log(row);
                             console.log("Task ID - " + row.getAttribute("data-id") + ", Task action - " + link.getAttribute("data-action"));
                             break;*/
                    }
                }
            );
        }

        /*for (var i = 0; i < getSelectedRows().length; i++) {
            var row = getSelectedRows()[i];
            console.log(row);
            console.log("Task ID - " + row.getAttribute("data-id") + ", Task action - " + link.getAttribute("data-action"));
        }*/

        toggleMenuOff();
    }

    function promptFolderCreation() {
        $('#folderCreationModal').modal({
            onApprove: function () {
                $.ajax({
                    url: "/api/v1/directories${if(parent != null ) "?parent=" + parent.id else ""}",
                    type: "POST",
                    data: $('#folderCreationForm').serialize(),
                    success: function () {
                        $('#folderCreationModal').modal('hide');
                        $('#folderCreationModal').remove();
                        htmx.trigger("#refreshButton", "refreshTable");
                        //window.location.href = '${AdminUsersPage.ROUTE}';
                    },
                });
                return false;
            }
        }).modal('show');
        return true;
    }

    function showFileDeletionLoadingModal(fileCount) {
        $('#fileDeletionModal').modal({
            closable: false,
            title: 'Deleting ' + fileCount + ' files',
        }).modal('show');
        return true;
    }

    function hideFileDeletionLoadingModal() {
        $('#fileDeletionModal').modal('hide');
    }

    function showFileDownloadModal(fileCount, progress) {
        const progressBar = $("#downloadModalProgress");
        const barText = progressBar.find(".progress")
        const barLabel = progressBar.find(".label")
        if (progress == -1) {
            progressBar.progress({
                percent: 100,
                autoSuccess: false,
                label: ""
            });

            if (!progressBar.hasClass("indeterminate")) {
                progressBar.removeClass("active")
                progressBar.removeClass("grey")
                progressBar.removeClass("success")
                progressBar.addClass("indeterminate")
                progressBar.addClass("orange")
            }
            barText.text("Processing")
            barLabel.text("Processing files on the server")
        } else {
            if (progressBar.hasClass("indeterminate")) {
                progressBar.removeClass("indeterminate")
                progressBar.removeClass("orange")
                progressBar.addClass("active")
                progressBar.addClass("grey")
            }

            progressBar.attr("data-percent", progress)

            barText.text(progress + "%")
            barLabel.show()
            barLabel.text("Downloading")
            progressBar.progress({
                percent: progress
            });
        }
        $('#fileDownloadModal').modal({
            closable: false,
            title: 'Downloading ' + fileCount + ' files',
        }).modal('show');
        return true;
    }

    function hideFileDownloadModal() {
        $('#fileDownloadModal').modal('hide');
    }

    /**
     * Run the app.
     */
    init();
</script>
