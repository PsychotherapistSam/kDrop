@import de.sam.base.pages.user.UserFilesPage
@import de.sam.base.config.Configuration.Companion.config
@import de.sam.base.users.UserRoles
@import de.sam.base.pages.displayLoader
@import de.sam.base.utils.*
@import de.sam.base.utils.isLoggedIn
@import de.sam.base.utils.preferencesString
@import de.sam.base.utils.toReadableTimeString
@import de.sam.base.utils.toRecentTimeString

@param page: UserFilesPage

@template.layout.page(
page = page,
content = @`
    !{val currentIsFolder = page.parent == null || page.parent!!.isFolder}
    !{val fileIsOwnedByCurrentUser = page.parent?.isOwnedByUserId(page.currentUserDTO?.id) == true}

    @if(!currentIsFolder && page.parent != null)
        <h1>${page.parent!!.name}</h1>
    @else
        <h1>Your Files</h1>
    @endif

    @if(fileIsOwnedByCurrentUser)
        @template.components.files.breadcrumbElementComp(breadcrumbs = page.breadcrumbs)
    @endif

    @if(fileIsOwnedByCurrentUser && false) <!-- fileHasAShare -->
        !{val typeString = if(page.parent!!.isFolder) "folder" else "file"}
        <div class="ui warning message">
            <div class="header">
                This ${typeString} is publically accessible!
            </div>
            This ${typeString} is publically accessible to all people who have access to the link.
            @if(page.parent!!.isFolder)
                All files or folders in this folder will inherit this access by default.
            @endif
            You can change this behavior by setting the access of this ${typeString} to private.
        </div>
    @endif

    @if(currentIsFolder)
        @template.components.files.fileListComp(fileDTOs = page.fileDTOs, sortByName = page.sortByName, sortBy = page.sortBy, ctx = page.context!!, parent = page.parent)
        @template.components.files.fileUploadComp(parent = page.parent, page = page)
    @else
        @template.components.files.fileDownloadComponent(file = page.parent!!, ctx = page.context!!)
    @endif

    <script>
        document.body.addEventListener('htmx:afterSwap', function (evt) {
            ds.stop(withCallback = true)
            initializeDragSelect();
            updateVisibilityOfEmptyFolder();
            //   ds.addSelectables()
        });
    </script>
`,
extraContent = @`
    @if(page.currentUserDTO != null && ( page.parent == null || page.parent?.isFolder == true))
        @template.components.files.modals()
        @template.components.files.fileListContextMenuComp(parent = page.parent)
    @endif
`)